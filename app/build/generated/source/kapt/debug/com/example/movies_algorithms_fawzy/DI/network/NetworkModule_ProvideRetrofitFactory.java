// Generated by Dagger (https://google.github.io/dagger).
package com.example.movies_algorithms_fawzy.DI.network;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.ArrayList;
import javax.inject.Provider;
import okhttp3.Interceptor;
import retrofit2.Retrofit;

public final class NetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final NetworkModule module;

  private final Provider<ArrayList<Interceptor>> interceptorsProvider;

  public NetworkModule_ProvideRetrofitFactory(
      NetworkModule module, Provider<ArrayList<Interceptor>> interceptorsProvider) {
    this.module = module;
    this.interceptorsProvider = interceptorsProvider;
  }

  @Override
  public Retrofit get() {
    return provideInstance(module, interceptorsProvider);
  }

  public static Retrofit provideInstance(
      NetworkModule module, Provider<ArrayList<Interceptor>> interceptorsProvider) {
    return proxyProvideRetrofit(module, interceptorsProvider.get());
  }

  public static NetworkModule_ProvideRetrofitFactory create(
      NetworkModule module, Provider<ArrayList<Interceptor>> interceptorsProvider) {
    return new NetworkModule_ProvideRetrofitFactory(module, interceptorsProvider);
  }

  public static Retrofit proxyProvideRetrofit(
      NetworkModule instance, ArrayList<Interceptor> interceptors) {
    return Preconditions.checkNotNull(
        instance.provideRetrofit(interceptors),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
