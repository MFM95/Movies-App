// Generated by Dagger (https://google.github.io/dagger).
package com.example.movies_algorithms_fawzy.DI.application;

import android.content.Context;
import com.example.movies_algorithms_fawzy.Common.imagehelper.ImageLoader;
import com.example.movies_algorithms_fawzy.DI.MovieDetails.MovieDetailsComponent;
import com.example.movies_algorithms_fawzy.DI.MovieDetails.MovieDetailsModule;
import com.example.movies_algorithms_fawzy.DI.MovieDetails.MovieDetailsModule_ProvidesMovieDetailsAPIFactory;
import com.example.movies_algorithms_fawzy.DI.MovieDetails.MovieDetailsModule_ProvidesMovieDetailsRepoFactory;
import com.example.movies_algorithms_fawzy.DI.TopRatedMovies.TopRatedModule;
import com.example.movies_algorithms_fawzy.DI.TopRatedMovies.TopRatedModule_ProvidesMoviesAPIFactory;
import com.example.movies_algorithms_fawzy.DI.TopRatedMovies.TopRatedModule_ProvidesMoviesRepoFactory;
import com.example.movies_algorithms_fawzy.DI.TopRatedMovies.TopRatedMoviesComponent;
import com.example.movies_algorithms_fawzy.DI.network.NetworkModule;
import com.example.movies_algorithms_fawzy.DI.network.NetworkModule_ProvideInterceptorsFactory;
import com.example.movies_algorithms_fawzy.DI.network.NetworkModule_ProvideRetrofitFactory;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Data.MovieDetailsAPI;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Domain.Interactors.GetMovieDetailsUSeCase;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Domain.Repos.MovieDetailsRepo;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Presentation.Activities.MovieDetailsActivity;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Presentation.Activities.MovieDetailsActivity_MembersInjector;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Presentation.ViewModels.MovieDetailsVMFactory;
import com.example.movies_algorithms_fawzy.Features.MovieDetailsFeatures.Presentation.ViewModels.MovieDetailsViewModel;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Data.MoviesAPI;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Domain.Interactors.GetMoviesUseCase;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Domain.Repos.MoviesRepo;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Presentation.Activities.TopRatedMoviesActivity;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Presentation.Activities.TopRatedMoviesActivity_MembersInjector;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Presentation.ViewModels.TopRatedMoviesVMFactory;
import com.example.movies_algorithms_fawzy.Features.MoviesFeature.Presentation.ViewModels.TopRatedMoviesViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.ArrayList;
import javax.inject.Provider;
import okhttp3.Interceptor;
import retrofit2.Retrofit;

public final class DaggerMainComponent implements MainComponent {
  private Provider<ArrayList<Interceptor>> provideInterceptorsProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<Context> provideAppContextProvider;

  private Provider<ImageLoader> provideImageLoaderProvider;

  private DaggerMainComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideInterceptorsProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideInterceptorsFactory.create(builder.networkModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                builder.networkModule, provideInterceptorsProvider));
    this.provideAppContextProvider =
        DoubleCheck.provider(AppModule_ProvideAppContextFactory.create(builder.appModule));
    this.provideImageLoaderProvider =
        DoubleCheck.provider(
            AppModule_ProvideImageLoaderFactory.create(
                builder.appModule, provideAppContextProvider));
  }

  @Override
  public TopRatedMoviesComponent plus(TopRatedModule topRatedMoviesModule) {
    return new TopRatedMoviesComponentImpl(topRatedMoviesModule);
  }

  @Override
  public MovieDetailsComponent plus(MovieDetailsModule movieDetailsModule) {
    return new MovieDetailsComponentImpl(movieDetailsModule);
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private AppModule appModule;

    private Builder() {}

    public MainComponent build() {
      if (networkModule == null) {
        throw new IllegalStateException(NetworkModule.class.getCanonicalName() + " must be set");
      }
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }

  private final class TopRatedMoviesComponentImpl implements TopRatedMoviesComponent {
    private TopRatedModule topRatedModule;

    private TopRatedMoviesComponentImpl(TopRatedModule topRatedMoviesModule) {
      initialize(topRatedMoviesModule);
    }

    private MoviesAPI getMoviesAPI() {
      return TopRatedModule_ProvidesMoviesAPIFactory.proxyProvidesMoviesAPI(
          topRatedModule, DaggerMainComponent.this.provideRetrofitProvider.get());
    }

    private MoviesRepo getMoviesRepo() {
      return TopRatedModule_ProvidesMoviesRepoFactory.proxyProvidesMoviesRepo(
          topRatedModule, getMoviesAPI());
    }

    private GetMoviesUseCase getGetMoviesUseCase() {
      return new GetMoviesUseCase(getMoviesRepo());
    }

    private TopRatedMoviesViewModel getTopRatedMoviesViewModel() {
      return new TopRatedMoviesViewModel(getGetMoviesUseCase());
    }

    private TopRatedMoviesVMFactory getTopRatedMoviesVMFactory() {
      return new TopRatedMoviesVMFactory(getTopRatedMoviesViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TopRatedModule topRatedMoviesModule) {
      this.topRatedModule = Preconditions.checkNotNull(topRatedMoviesModule);
    }

    @Override
    public void inject(TopRatedMoviesActivity activity) {
      injectTopRatedMoviesActivity(activity);
    }

    private TopRatedMoviesActivity injectTopRatedMoviesActivity(TopRatedMoviesActivity instance) {
      TopRatedMoviesActivity_MembersInjector.injectFactory(instance, getTopRatedMoviesVMFactory());
      TopRatedMoviesActivity_MembersInjector.injectImageLoader(
          instance, DaggerMainComponent.this.provideImageLoaderProvider.get());
      return instance;
    }
  }

  private final class MovieDetailsComponentImpl implements MovieDetailsComponent {
    private MovieDetailsModule movieDetailsModule;

    private MovieDetailsComponentImpl(MovieDetailsModule movieDetailsModule) {
      initialize(movieDetailsModule);
    }

    private MovieDetailsAPI getMovieDetailsAPI() {
      return MovieDetailsModule_ProvidesMovieDetailsAPIFactory.proxyProvidesMovieDetailsAPI(
          movieDetailsModule, DaggerMainComponent.this.provideRetrofitProvider.get());
    }

    private MovieDetailsRepo getMovieDetailsRepo() {
      return MovieDetailsModule_ProvidesMovieDetailsRepoFactory.proxyProvidesMovieDetailsRepo(
          movieDetailsModule, getMovieDetailsAPI());
    }

    private GetMovieDetailsUSeCase getGetMovieDetailsUSeCase() {
      return new GetMovieDetailsUSeCase(getMovieDetailsRepo());
    }

    private MovieDetailsViewModel getMovieDetailsViewModel() {
      return new MovieDetailsViewModel(getGetMovieDetailsUSeCase());
    }

    private MovieDetailsVMFactory getMovieDetailsVMFactory() {
      return new MovieDetailsVMFactory(getMovieDetailsViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MovieDetailsModule movieDetailsModule) {
      this.movieDetailsModule = Preconditions.checkNotNull(movieDetailsModule);
    }

    @Override
    public void inject(MovieDetailsActivity activity) {
      injectMovieDetailsActivity(activity);
    }

    private MovieDetailsActivity injectMovieDetailsActivity(MovieDetailsActivity instance) {
      MovieDetailsActivity_MembersInjector.injectFactory(instance, getMovieDetailsVMFactory());
      MovieDetailsActivity_MembersInjector.injectImageLoader(
          instance, DaggerMainComponent.this.provideImageLoaderProvider.get());
      return instance;
    }
  }
}
